<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogo da Memória Personalizável</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            text-align: center;
            background-color: #f5f5f5;
        }
        
        h1 {
            color: #333;
        }
        
        #setup-screen, #game-screen {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        #game-screen {
            display: none;
        }
        
        .image-upload {
            margin: 15px 0;
            padding: 10px;
            border: 2px dashed #ccc;
            border-radius: 5px;
        }
        
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 10px 2px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #45a049;
        }
        
        #memory-board {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin: 20px auto;
            max-width: 600px;
        }
        
        .memory-card {
            width: 100%;
            height: 120px;
            perspective: 1000px;
            cursor: pointer;
        }
        
        .memory-card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 0.6s;
            transform-style: preserve-3d;
        }
        
        .memory-card.flipped .memory-card-inner {
            transform: rotateY(180deg);
        }
        
        .memory-card-front, .memory-card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .memory-card-front {
            background-color: #4CAF50;
            color: white;
            font-size: 24px;
            transform: rotateY(180deg);
            overflow: hidden;
        }
        
        .memory-card-front img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .memory-card-back {
            background-color: #333;
            color: white;
        }
        
        #stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }
        
        .stat-box {
            background-color: #333;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>Jogo da Memória Personalizável</h1>
    
    <div id="setup-screen">
        <h2>Adicione suas imagens</h2>
        <p>Adicione até 10 imagens diferentes. Cada imagem será usada em 2 cartas.</p>
        
        <div id="image-upload-container">
            <!-- Os inputs de upload serão adicionados aqui pelo JavaScript -->
        </div>
        
        <button id="add-image-btn">Adicionar mais uma imagem</button>
        <button id="start-game-btn">Começar o Jogo</button>
    </div>
    
    <div id="game-screen">
        <h2>Jogo da Memória</h2>
        
        <div id="stats">
            <div class="stat-box">Tentativas: <span id="attempts">0</span></div>
            <div class="stat-box">Pares encontrados: <span id="matches">0</span>/<span id="total-pairs">0</span></div>
        </div>
        
        <div id="memory-board">
            <!-- As cartas do jogo serão adicionadas aqui pelo JavaScript -->
        </div>
        
        <button id="restart-game-btn">Reiniciar Jogo</button>
    </div>
    
    <script>
        // Variáveis do jogo
        let images = [];
        let cards = [];
        let flippedCards = [];
        let matchedPairs = 0;
        let attempts = 0;
        let totalPairs = 0;
        let canFlip = true;
        
        // Elementos do DOM
        const setupScreen = document.getElementById('setup-screen');
        const gameScreen = document.getElementById('game-screen');
        const imageUploadContainer = document.getElementById('image-upload-container');
        const addImageBtn = document.getElementById('add-image-btn');
        const startGameBtn = document.getElementById('start-game-btn');
        const memoryBoard = document.getElementById('memory-board');
        const attemptsDisplay = document.getElementById('attempts');
        const matchesDisplay = document.getElementById('matches');
        const totalPairsDisplay = document.getElementById('total-pairs');
        const restartGameBtn = document.getElementById('restart-game-btn');
        
        // Adiciona o primeiro input de imagem
        addImageInput();
        
        // Event listeners
        addImageBtn.addEventListener('click', addImageInput);
        startGameBtn.addEventListener('click', startGame);
        restartGameBtn.addEventListener('click', restartGame);
        
        // Função para adicionar um novo input de imagem
        function addImageInput() {
            if (imageUploadContainer.children.length >= 10) {
                alert('Você já adicionou o número máximo de 10 imagens.');
                return;
            }
            
            const div = document.createElement('div');
            div.className = 'image-upload';
            
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.className = 'image-input';
            
            const preview = document.createElement('img');
            preview.style.maxWidth = '100px';
            preview.style.maxHeight = '100px';
            preview.style.display = 'none';
            
            input.addEventListener('change', function(e) {
                if (e.target.files && e.target.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        preview.src = event.target.result;
                        preview.style.display = 'block';
                    };
                    reader.readAsDataURL(e.target.files[0]);
                }
            });
            
            div.appendChild(document.createElement('p')).textContent = `Imagem ${imageUploadContainer.children.length + 1}:`;
            div.appendChild(input);
            div.appendChild(preview);
            imageUploadContainer.appendChild(div);
        }
        
        // Função para iniciar o jogo
        function startGame() {
            // Coletar todas as imagens carregadas
            images = [];
            const inputs = document.querySelectorAll('.image-input');
            
            inputs.forEach(input => {
                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        images.push(event.target.result);
                        
                        // Quando todas as imagens forem carregadas, iniciar o jogo
                        if (images.length === getValidInputsCount()) {
                            setupGame();
                        }
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            });
            
            // Verificar se há imagens suficientes
            const validInputs = getValidInputsCount();
            if (validInputs < 2) {
                alert('Adicione pelo menos 2 imagens diferentes para começar o jogo.');
                return;
            }
        }
        
        // Função para contar quantos inputs têm imagens válidas
        function getValidInputsCount() {
            let count = 0;
            document.querySelectorAll('.image-input').forEach(input => {
                if (input.files && input.files[0]) count++;
            });
            return count;
        }
        
        // Função para configurar o tabuleiro do jogo
        function setupGame() {
            // Duplicar as imagens para formar pares
            const gameImages = [...images, ...images];
            totalPairs = images.length;
            
            // Embaralhar as imagens
            gameImages.sort(() => Math.random() - 0.5);
            
            // Limpar o tabuleiro
            memoryBoard.innerHTML = '';
            cards = [];
            flippedCards = [];
            matchedPairs = 0;
            attempts = 0;
            
            // Atualizar displays
            attemptsDisplay.textContent = attempts;
            matchesDisplay.textContent = matchedPairs;
            totalPairsDisplay.textContent = totalPairs;
            
            // Criar as cartas do jogo
            gameImages.forEach((image, index) => {
                const card = document.createElement('div');
                card.className = 'memory-card';
                card.dataset.index = index;
                
                const cardInner = document.createElement('div');
                cardInner.className = 'memory-card-inner';
                
                const cardFront = document.createElement('div');
                cardFront.className = 'memory-card-front';
                const img = document.createElement('img');
                img.src = image;
                cardFront.appendChild(img);
                
                const cardBack = document.createElement('div');
                cardBack.className = 'memory-card-back';
                cardBack.textContent = '?';
                
                cardInner.appendChild(cardFront);
                cardInner.appendChild(cardBack);
                card.appendChild(cardInner);
                
                card.addEventListener('click', flipCard);
                
                memoryBoard.appendChild(card);
                cards.push({
                    element: card,
                    image: image,
                    matched: false
                });
            });
            
            // Mostrar a tela do jogo
            setupScreen.style.display = 'none';
            gameScreen.style.display = 'block';
        }
        
        // Função para virar uma carta
        function flipCard() {
            if (!canFlip) return;
            
            const index = this.dataset.index;
            const card = cards[index];
            
            // Não fazer nada se a carta já estiver virada ou já foi combinada
            if (flippedCards.includes(index) || card.matched) return;
            
            // Virar a carta
            this.classList.add('flipped');
            flippedCards.push(index);
            
            // Verificar se temos duas cartas viradas
            if (flippedCards.length === 2) {
                attempts++;
                attemptsDisplay.textContent = attempts;
                
                canFlip = false;
                
                const firstCard = cards[flippedCards[0]];
                const secondCard = cards[flippedCards[1]];
                
                if (firstCard.image === secondCard.image) {
                    // Par encontrado
                    firstCard.matched = true;
                    secondCard.matched = true;
                    matchedPairs++;
                    matchesDisplay.textContent = matchedPairs;
                    
                    flippedCards = [];
                    canFlip = true;
                    
                    // Verificar se o jogo terminou
                    if (matchedPairs === totalPairs) {
                        setTimeout(() => {
                            alert(`Parabéns! Você completou o jogo em ${attempts} tentativas.`);
                        }, 500);
                    }
                } else {
                    // Par não encontrado, virar as cartas de volta após um tempo
                    setTimeout(() => {
                        document.querySelector(`.memory-card[data-index="${flippedCards[0]}"]`).classList.remove('flipped');
                        document.querySelector(`.memory-card[data-index="${flippedCards[1]}"]`).classList.remove('flipped');
                        flippedCards = [];
                        canFlip = true;
                    }, 1000);
                }
            }
        }
        
        // Função para reiniciar o jogo
        function restartGame() {
            setupScreen.style.display = 'block';
            gameScreen.style.display = 'none';
            imageUploadContainer.innerHTML = '';
            addImageInput();
            addImageInput(); // Adiciona dois inputs inicialmente
        }
    </script>
</body>
</html>
